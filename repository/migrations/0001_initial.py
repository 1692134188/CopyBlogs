# Generated by Django 2.1.5 on 2019-02-10 03:57

from django.db import migrations, models
import django.db.models.aggregates
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('nid', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=128, verbose_name='文章标题')),
                ('summary', models.CharField(max_length=256, verbose_name='简介')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('ms_Type', models.IntegerField(choices=[(1, 'Python'), (2, 'Linux'), (3, 'OpenStack'), (4, 'GoLang')], default=None, verbose_name='主站分类')),
            ],
        ),
        migrations.CreateModel(
            name='Article_Comment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='评论ID')),
                ('comment', models.CharField(max_length=1000, verbose_name='评论内容')),
                ('createTime', models.DateTimeField(auto_now_add=True, verbose_name='评论时间')),
                ('reply', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='back', to='repository.Article_Comment', verbose_name='回复评论')),
            ],
        ),
        migrations.CreateModel(
            name='Article_Detail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail', models.TextField(max_length=django.db.models.aggregates.Max, verbose_name='文章详细')),
                ('article_id', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Article', verbose_name='文章id')),
            ],
        ),
        migrations.CreateModel(
            name='Article_Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Article', verbose_name='文章ID')),
            ],
        ),
        migrations.CreateModel(
            name='Article_upDown',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('up', models.BooleanField(verbose_name='是否赞')),
                ('article_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Article', verbose_name='文章ID')),
            ],
        ),
        migrations.CreateModel(
            name='BlogInfo',
            fields=[
                ('bid', models.BigAutoField(primary_key=True, serialize=False)),
                ('surfix', models.CharField(max_length=64, verbose_name='博客后缀名')),
                ('theme', models.CharField(max_length=64, verbose_name='博客主题')),
                ('title', models.CharField(max_length=1000, verbose_name='博客标题')),
                ('summary', models.CharField(max_length=1000, verbose_name='博客简介')),
            ],
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='分类名称')),
                ('blog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.BlogInfo', verbose_name='所属博客')),
            ],
        ),
        migrations.CreateModel(
            name='ReportObstacles',
            fields=[
                ('uuid', models.UUIDField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=1000, verbose_name='报障标题')),
                ('detail', models.TextField(verbose_name='报障详情')),
                ('createTime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('processTime', models.DateTimeField(auto_now_add=True, verbose_name='处理时间')),
                ('status', models.IntegerField(choices=[(1, '待处理'), (2, '处理中'), (3, '已处理')], default=None)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='标签名称')),
                ('blog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.BlogInfo', verbose_name='所属博客')),
            ],
        ),
        migrations.CreateModel(
            name='UserFans',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('uid', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=64, unique=True, verbose_name='用户名')),
                ('pwd', models.CharField(max_length=64, verbose_name='密码')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('img', models.ImageField(upload_to='', verbose_name='头像')),
            ],
        ),
        migrations.AddField(
            model_name='userfans',
            name='fansUser',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fansUsers', to='repository.UserInfo', verbose_name='粉丝'),
        ),
        migrations.AddField(
            model_name='userfans',
            name='starUser',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='starUsers', to='repository.UserInfo', verbose_name='博主'),
        ),
        migrations.AddField(
            model_name='reportobstacles',
            name='processUser',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processUsers', to='repository.UserInfo', verbose_name='处理人'),
        ),
        migrations.AddField(
            model_name='reportobstacles',
            name='reportUser',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reportUsers', to='repository.UserInfo', verbose_name='报修人'),
        ),
        migrations.AddField(
            model_name='bloginfo',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.UserInfo'),
        ),
        migrations.AddField(
            model_name='article_updown',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.UserInfo', verbose_name='赞或踩用户'),
        ),
        migrations.AddField(
            model_name='article_tag',
            name='tag_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Tag', verbose_name='标签ID'),
        ),
        migrations.AddField(
            model_name='article_comment',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.UserInfo', verbose_name='评论人'),
        ),
        migrations.AddField(
            model_name='article',
            name='classification_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Classification', verbose_name='文章分类'),
        ),
        migrations.AlterUniqueTogether(
            name='userfans',
            unique_together={('starUser', 'fansUser')},
        ),
        migrations.AlterUniqueTogether(
            name='article_updown',
            unique_together={('article_id', 'user')},
        ),
    ]
